import React, { useEffect, useState } from 'react';
import { setTheme, getTheme, Theme } from './theme';

interface Campaign {
  id: number;
  name: string;
  status: 'active' | 'paused';
  stats: { clicks: number; budget: number; };
}

const mockCampaigns: Campaign[] = [
  { id: 1, name: '–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è', status: 'active', stats: { clicks: 120, budget: 5000 } },
  { id: 2, name: '–¢—Ä–∞—Ñ–∏–∫ –Ω–∞ —Å–∞–π—Ç', status: 'paused', stats: { clicks: 80, budget: 3000 } },
];

export default function App() {
  const [theme, setThemeState] = useState<Theme>(getTheme());
  const [campaigns] = useState<Campaign[]>(mockCampaigns);
  const [showUpload, setShowUpload] = useState(false);
  const [showAutopilot, setShowAutopilot] = useState(false);
  const [showRecommendations, setShowRecommendations] = useState(false);

  useEffect(() => {
    setTheme(theme);
    // Telegram WebApp API init
    // @ts-ignore
    window.Telegram?.WebApp?.ready && window.Telegram.WebApp.ready();
    // @ts-ignore
    window.Telegram?.WebApp?.expand && window.Telegram.WebApp.expand();
  }, [theme]);

  return (
    <div className="container">
      <header className="header">
        <span className="logo">–ò–ò –¢–∞—Ä–≥–µ—Ç–æ–ª–æ–≥</span>
        <button className="btn" onClick={() => setThemeState(theme === 'dark' ? 'light' : 'dark')}>
          {theme === 'dark' ? 'üåû' : 'üåô'}
        </button>
      </header>
      <main className="main-content">
        <h1>–í–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏</h1>
        <div className="campaigns-list">
          {campaigns.map(c => (
            <div className="campaign-card" key={c.id}>
              <div className="campaign-header">
                <span className="campaign-title">{c.name}</span>
                <span className={`campaign-status status-${c.status}`}>{c.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ü–∞—É–∑–∞'}</span>
              </div>
              <div className="campaign-stats">
                <span className="stat-item"><span className="stat-value">{c.stats.clicks}</span> –∫–ª–∏–∫–æ–≤</span>
                <span className="stat-item"><span className="stat-value">{c.stats.budget}‚ÇΩ</span> –±—é–¥–∂–µ—Ç</span>
              </div>
            </div>
          ))}
        </div>
        <div className="section">
          <button className="btn btn-primary" onClick={() => setShowUpload(true)}>–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤</button>
        </div>
        <div className="section">
          <button className="btn" onClick={() => setShowAutopilot(true)}>–ò–ò-–∞–≤—Ç–æ–ø–∏–ª–æ—Ç</button>
        </div>
        <div className="section">
          <button className="btn" onClick={() => setShowRecommendations(true)}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</button>
        </div>
        <div className="section">
          <button className="btn" onClick={() => alert('–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Facebook (–∑–∞–≥–ª—É—à–∫–∞)')}>–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Facebook</button>
        </div>
      </main>
      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showUpload && (
        <div className="modal active">
          <div className="modal-content">
            <div className="modal-header">
              <span className="modal-title">–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞</span>
              <button className="close-btn" onClick={() => setShowUpload(false)}>√ó</button>
            </div>
            <div className="form-group">
              <label className="form-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</label>
              <input className="form-input" type="file" accept="image/*,video/*" />
            </div>
            <button className="btn btn-primary">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
          </div>
        </div>
      )}
      {showAutopilot && (
        <div className="modal active">
          <div className="modal-content">
            <div className="modal-header">
              <span className="modal-title">–ò–ò-–∞–≤—Ç–æ–ø–∏–ª–æ—Ç</span>
              <button className="close-btn" onClick={() => setShowAutopilot(false)}>√ó</button>
            </div>
            <div className="autopilot-controls">
              <label className="switch">
                <input type="checkbox" />
                <span className="slider"></span>
              </label>
              <span className="autopilot-status">–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω</span>
            </div>
            <button className="btn btn-primary">–í–∫–ª—é—á–∏—Ç—å</button>
          </div>
        </div>
      )}
      {showRecommendations && (
        <div className="modal active">
          <div className="modal-content">
            <div className="modal-header">
              <span className="modal-title">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
              <button className="close-btn" onClick={() => setShowRecommendations(false)}>√ó</button>
            </div>
            <div className="recommendations-list">
              <div className="recommendation-card">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</div>
              <div className="recommendation-card">–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç –¥–ª—è –ª—É—á—à–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π.</div>
            </div>
          </div>
        </div>
      )}
      <nav className="bottom-nav">
        <div className="nav-item active"><span className="nav-icon">üìä</span><span>–ö–∞–º–ø–∞–Ω–∏–∏</span></div>
        <div className="nav-item"><span className="nav-icon">üì§</span><span>–ö—Ä–µ–∞—Ç–∏–≤—ã</span></div>
        <div className="nav-item"><span className="nav-icon">ü§ñ</span><span>–ê–≤—Ç–æ–ø–∏–ª–æ—Ç</span></div>
        <div className="nav-item"><span className="nav-icon">üí°</span><span>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span></div>
      </nav>
    </div>
  );
} 
