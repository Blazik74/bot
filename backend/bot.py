import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, ApplicationBuilder, CallbackQueryHandler, PicklePersistence
from datetime import datetime, timedelta
import re
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, func

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã –∏ –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
from .db import AsyncSessionLocal, User, Tariff, init_db
from .users import UserService

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ username —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render.
#
# –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å:
# 1. –ó–∞–π–¥–∏—Ç–µ –≤ –≤–∞—à —Å–µ—Ä–≤–∏—Å –Ω–∞ Render.
# 2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "Environment".
# 3. –í "Environment Variables" –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:
#    - Key: SUPERADMIN_USERNAMES
#    - Value: –≤–∞—à_username1,–≤–∞—à_username2 (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ë–ï–ó @ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
#
# –ü—Ä–∏–º–µ—Ä Value: blazik1,isonim
SUPERADMIN_USERNAMES = [
    username.strip() 
    for username in os.environ.get("SUPERADMIN_USERNAMES", "").split(',') 
    if username.strip()
]
if not SUPERADMIN_USERNAMES:
    logger.warning("!!! SUPERADMIN_USERNAMES is not set in environment variables. Admin features will not work correctly.")

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(
    CHOOSING_COMMAND,
    GET_USERNAME_FOR_GRANT, GET_DURATION_FOR_GRANT, GET_TARIFF_FOR_GRANT,
    GET_USERNAME_FOR_REVOKE,
    GET_USERNAME_FOR_GRANT_ADMIN,
    GET_USERNAME_FOR_REVOKE_ADMIN,
    GET_USERNAME_FOR_INFO
) = range(8)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        if not user:
            return
        
        async with AsyncSessionLocal() as session:
            db_user = await _find_user_by_telegram_id(str(user.id), session)
            
            is_superadmin = user.username in SUPERADMIN_USERNAMES

            if is_superadmin:
                if not db_user:
                    logger.info(f"Superadmin {user.username} not found in DB, creating new entry.")
                    db_user = User(
                        telegram_id=str(user.id),
                        username=user.username,
                        name=user.full_name,
                        role='superadmin',
                        tariff_id=3, # –¢–∞—Ä–∏—Ñ "–ö–æ–º–ø–∞–Ω–∏—è"
                        is_active=True,
                        access_expires_at=None
                    )
                    session.add(db_user)
                    await session.commit()
                elif db_user.role != 'superadmin' or db_user.tariff_id != 3:
                    logger.info(f"User {user.username} found in DB, updating role to superadmin and granting access.")
                    db_user.role = 'superadmin'
                    db_user.tariff_id = 3
                    db_user.access_expires_at = None
                
                return await func(update, context, *args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –≤ –ë–î
            if db_user and db_user.role in ["admin", "superadmin"]:
                return await func(update, context, *args, **kwargs)

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return wrapper

async def _find_user_by_telegram_id(telegram_id: str, session: AsyncSession) -> User | None:
    result = await session.execute(
        select(User).where(User.telegram_id == telegram_id)
    )
    return result.scalar_one_or_none()

async def _find_user_by_username(username: str, session: AsyncSession) -> User:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ username. Username –º–æ–∂–µ—Ç –±—ã—Ç—å —Å @ –∏–ª–∏ –±–µ–∑.
    –ü–æ–∏—Å–∫ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ "–ø—É—Å—Ç–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    clean_username = username.lstrip('@')
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User).where(func.lower(User.username) == func.lower(clean_username))
    )
    user = result.scalar_one_or_none()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if user is None:
        logger.info(f"User '{clean_username}' not found, creating a placeholder user.")
        user = User(
            username=clean_username,
            name=clean_username,  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∫–∞–∫ –∏–º—è
            role="user",
            tariff_id=1,
            # telegram_id –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç /start
        )
        session.add(user)
        # –í–∞–∂–Ω–æ: –Ω–µ –¥–µ–ª–∞–µ–º commit –∑–¥–µ—Å—å, —Ç.–∫. –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ
        # –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–¥–∞—á–∏ —Ç–∞—Ä–∏—Ñ–∞).
        # –ù–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user.id, –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ª–∞–µ–º flush.
        await session.flush()
        await session.refresh(user)

    return user

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    username = update.effective_user.username
    full_name = update.effective_user.full_name
    
    async with AsyncSessionLocal() as session:
        user = (await session.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()

        if not user:
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({user_id})")
            user = User(
                telegram_id=user_id,
                username=username,
                name=full_name,
                role="user",
                tariff_id=1,
            )
            session.add(user)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            user.username = username
            user.name = full_name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º /start
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –Ω–∞ –º–µ—Å—Ç–µ
        if username in SUPERADMIN_USERNAMES:
            if user.role != 'superadmin' or user.tariff_id != 3:
                logger.info(f"Updating user {username} to superadmin.")
                user.role = "superadmin"
                user.tariff_id = 3  # –¢–∞—Ä–∏—Ñ "–ö–æ–º–ø–∞–Ω–∏—è"
                user.access_expires_at = None
        
        await session.commit()
        await session.refresh(user) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç user –∏–∑ –ë–î
            
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """
ü§ñ <b>–ò–ò –¢–∞—Ä–≥–µ—Ç–æ–ª–æ–≥</b> ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –≤ Facebook Ads!

‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI –∏ Facebook

–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Web App
    frontend_url = os.environ.get("FRONTEND_URL", "https://tg-miniapp-7li9.onrender.com") # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω
    keyboard = [[InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": frontend_url})]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        text=welcome_text.strip(),
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


@admin_required
async def help_ap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
    <b>–ö–æ–º–∞–Ω–¥—ã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b>

/admin - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
/help_ap - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await update.message.reply_text(help_text, parse_mode='HTML')


async def find_user_by_username(username: str, session: AsyncSession):
    # –í Telegram –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –Ω–∞–π—Ç–∏ —é–∑–µ—Ä–∞ –ø–æ username, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª /start
    result = await session.execute(
        select(User).where(User.name.contains(username)) # –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏, —Ç.–∫. username –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è
    )
    # –≠—Ç–æ –Ω–µ –Ω–∞–¥–µ–∂–Ω–æ. –í –∏–¥–µ–∞–ª–µ, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–∏—Ç—å —é–∑–µ—Ä–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –Ω–æ —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–ª—É—á—à–∏—Ç—å.
    # –î–∞–≤–∞–π—Ç–µ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ telegram_id, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—É–¥–∞-—Ç–æ –∑–Ω–∞—Ç—å
    # –ò–ª–∏ –ø–æ –∏–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º. 
    # –õ—É—á—à–µ –≤—Å–µ–≥–æ - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –¥–∞–µ–º –¥–æ—Å—Ç—É–ø, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
    return None # –ó–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫

@admin_required
async def grant_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.
    –§–æ—Ä–º–∞—Ç: /grant_access <@username> <—Å—Ä–æ–∫> <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–∞—Ä–∏—Ñ–∞>
    –ü—Ä–∏–º–µ—Ä: /grant_access @testuser 30d –§—Ä–∏–ª–∞–Ω—Å–µ—Ä
    """
    if not context.args or len(context.args) < 3:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/grant_access <@username> <—Å—Ä–æ–∫> <—Ç–∞—Ä–∏—Ñ>\n"
            "–ü—Ä–∏–º–µ—Ä: /grant_access @user 30d –ö–æ–º–ø–∞–Ω–∏—è"
        )
        return

    username = context.args[0]
    period_str = context.args[1]
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    tariff_name_input = " ".join(context.args[2:])

    await grant_access_logic(update.message, username, period_str, tariff_name_input)


@admin_required
async def revoke_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏ –≤–µ—Ä–Ω—É—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –§–æ—Ä–º–∞—Ç: /revoke_access <@username>"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    username = context.args[0]
    await revoke_access_logic(update.message, username)


@admin_required
async def grant_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –§–æ—Ä–º–∞—Ç: /grant_admin <@username>"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    username = context.args[0]
    await grant_admin_logic(update.message, username)


@admin_required
async def revoke_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –§–æ—Ä–º–∞—Ç: /revoke_admin <@username>"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    username = context.args[0]
    await revoke_admin_logic(update.message, username)


@admin_required
async def user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –§–æ—Ä–º–∞—Ç: /user_info <@username>"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    username = context.args[0]
    await user_info_logic(update.message, username)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---

@admin_required
async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —á—Ç–æ –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å."""
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [InlineKeyboardButton("–í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=str(GET_USERNAME_FOR_GRANT))],
        [InlineKeyboardButton("–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=str(GET_USERNAME_FOR_REVOKE))],
        [InlineKeyboardButton("–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=str(GET_USERNAME_FOR_GRANT_ADMIN))],
        [InlineKeyboardButton("–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞", callback_data=str(GET_USERNAME_FOR_REVOKE_ADMIN))],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ", callback_data=str(GET_USERNAME_FOR_INFO))],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)
    return CHOOSING_COMMAND

async def ask_for_username(update: Update, context: ContextTypes.DEFAULT_TYPE, next_state: int) -> int:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ username."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ —Å @):")
    return next_state
    
# ... (–∑–¥–µ—Å—å –±—É–¥—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –¥–∏–∞–ª–æ–≥–∞)

# --- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–æ–≤ –¥–∏–∞–ª–æ–≥–∞ ---

async def received_username_for_grant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ username, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫."""
    username = update.message.text
    context.user_data['username'] = username
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7d, 1m, 1y):")
    return GET_DURATION_FOR_GRANT

async def received_duration_for_grant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ —Å—Ä–æ–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ."""
    duration = update.message.text
    context.user_data['duration'] = duration
    keyboard = [
        [InlineKeyboardButton("–§—Ä–∏–ª–∞–Ω—Å–µ—Ä", callback_data="—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä")],
        [InlineKeyboardButton("–ö–æ–º–ø–∞–Ω–∏—è", callback_data="–∫–æ–º–ø–∞–Ω–∏—è")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=reply_markup)
    return GET_TARIFF_FOR_GRANT

async def received_tariff_for_grant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ —Ç–∞—Ä–∏—Ñ, –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø."""
    query = update.callback_query
    await query.answer()
    tariff_name = query.data
    
    username = context.user_data['username']
    duration = context.user_data['duration']

    # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é, –Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
    await grant_access_logic(query.message, username, duration, tariff_name)
    context.user_data.clear()
    return ConversationHandler.END
    
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–∏–∞–ª–æ–≥–∞ ---

async def received_username_for_revoke(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ username, –æ—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø."""
    username = update.message.text
    await revoke_access_logic(update.message, username)
    context.user_data.clear()
    return ConversationHandler.END

async def received_username_for_grant_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ username, –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–æ–º."""
    username = update.message.text
    await grant_admin_logic(update.message, username)
    context.user_data.clear()
    return ConversationHandler.END

async def received_username_for_revoke_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ username, —Å–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞."""
    username = update.message.text
    await revoke_admin_logic(update.message, username)
    context.user_data.clear()
    return ConversationHandler.END

async def received_username_for_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏–ª–∏ username, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    username = update.message.text
    await user_info_logic(update.message, username)
    context.user_data.clear()
    return ConversationHandler.END


# --- –õ–æ–≥–∏–∫–∞, –≤—ã–Ω–µ—Å–µ–Ω–Ω–∞—è –∏–∑ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ ---
async def grant_access_logic(message, username, period_str, tariff_name_input):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞."""
    async with AsyncSessionLocal() as session:
        user = await _find_user_by_username(username, session)
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "1m", "7d", "1y" –≤ timedelta
            num = int(re.search(r'\d+', period_str).group())
            unit = re.search(r'[a-zA-Z]+', period_str).group().lower()
            if unit == 'd':
                delta = timedelta(days=num)
            elif unit == 'm':
                delta = timedelta(days=num * 30)
            elif unit == 'y':
                delta = timedelta(days=num * 365)
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏")
            expires_at = datetime.utcnow() + delta
        except (AttributeError, ValueError) as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ä–æ–∫–∞: '{period_str}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'd' –¥–ª—è –¥–Ω–µ–π, 'm' –¥–ª—è –º–µ—Å—è—Ü–µ–≤, 'y' –¥–ª—è –ª–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7d, 1m, 1y).")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –∏–∑ –ë–î
        all_tariffs_result = await session.execute(select(Tariff))
        all_tariffs = all_tariffs_result.scalars().all()

        # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ –∫–æ–¥–µ, –∞ –Ω–µ –≤ –ë–î, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        target_tariff = None
        for t in all_tariffs:
            if t.name.lower() == tariff_name_input.lower():
                target_tariff = t
                break

        if not target_tariff:
            tariff_names = [t.name for t in all_tariffs if t.price > 0]
            await message.reply_text(f"–¢–∞—Ä–∏—Ñ '{tariff_name_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: {', '.join(tariff_names)}.")
            return

        user.tariff_id = target_tariff.id
        user.access_expires_at = expires_at
        user.is_active = True
        if user.role not in ("admin", "superadmin"):
            user.role = "user"
        await session.commit()
        
        expires_str = expires_at.strftime('%Y-%m-%d %H:%M')
        await message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω —Ç–∞—Ä–∏—Ñ '{target_tariff.name}' –¥–æ {expires_str} UTC.")

async def revoke_access_logic(message, username):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞."""
    async with AsyncSessionLocal() as session:
        user = await _find_user_by_username(username, session)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ if not user –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, –Ω–æ –¥–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —é–∑–µ—Ä –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ
        # –∏ —É –Ω–µ–≥–æ –∏ —Ç–∞–∫ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –•–æ—Ç—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ —ç—Ç–æ –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ.

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        user.tariff_id = 1
        user.access_expires_at = None
        user.is_active = True
        await session.commit()
        await message.reply_text(f"–î–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞—Ä–∏—Ñ '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'.")

async def revoke_admin_logic(message, username):
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    async with AsyncSessionLocal() as session:
        user = await _find_user_by_username(username, session)
        
        user.role = "user"
        user.tariff_id = 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        user.access_expires_at = None
        user.is_active = True
        await session.commit()
        await message.reply_text(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.")

async def user_info_logic(message, username):
    # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async with AsyncSessionLocal() as session:
        user = await _find_user_by_username(username, session)
        
        tariff_result = await session.execute(select(Tariff).where(Tariff.id == user.tariff_id))
        tariff = tariff_result.scalar_one_or_none()
        tariff_name = tariff.name if tariff else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        expires_at = user.access_expires_at.strftime('%Y-%m-%d %H:%M') if user.access_expires_at else "–ù–µ—Ç"

        info_text = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.username or user.name}:</b>\n\n"
            f"<b>ID:</b> <code>{user.telegram_id}</code>\n"
            f"<b>–†–æ–ª—å:</b> {user.role}\n"
            f"<b>–¢–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
            f"<b>–î–æ—Å—Ç—É–ø –¥–æ:</b> {expires_at}"
        )
        await message.reply_text(info_text, parse_mode='HTML')

async def grant_admin_logic(message, username):
    # –õ–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    async with AsyncSessionLocal() as session:
        user = await _find_user_by_username(username, session)
        
        user.role = "admin"
        user.tariff_id = 3  # –¢–∞—Ä–∏—Ñ "–ö–æ–º–ø–∞–Ω–∏—è"
        user.access_expires_at = None  # –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        user.is_active = True
        await session.commit()
        await message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —Ç–∞—Ä–∏—Ñ–æ–º '–ö–æ–º–ø–∞–Ω–∏—è'.")

# --- Conversation Handler ---
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("admin", start_conversation)],
    states={
        CHOOSING_COMMAND: [
            CallbackQueryHandler(lambda u,c: ask_for_username(u,c,GET_USERNAME_FOR_GRANT), pattern='^' + str(GET_USERNAME_FOR_GRANT) + '$'),
            CallbackQueryHandler(lambda u,c: ask_for_username(u,c,GET_USERNAME_FOR_REVOKE), pattern='^' + str(GET_USERNAME_FOR_REVOKE) + '$'),
            CallbackQueryHandler(lambda u,c: ask_for_username(u,c,GET_USERNAME_FOR_GRANT_ADMIN), pattern='^' + str(GET_USERNAME_FOR_GRANT_ADMIN) + '$'),
            CallbackQueryHandler(lambda u,c: ask_for_username(u,c,GET_USERNAME_FOR_REVOKE_ADMIN), pattern='^' + str(GET_USERNAME_FOR_REVOKE_ADMIN) + '$'),
            CallbackQueryHandler(lambda u,c: ask_for_username(u,c,GET_USERNAME_FOR_INFO), pattern='^' + str(GET_USERNAME_FOR_INFO) + '$'),
            CallbackQueryHandler(cancel, pattern='^cancel$'),
        ],
        GET_USERNAME_FOR_GRANT: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_username_for_grant)],
        GET_DURATION_FOR_GRANT: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_duration_for_grant)],
        GET_TARIFF_FOR_GRANT: [CallbackQueryHandler(received_tariff_for_grant)],
        GET_USERNAME_FOR_REVOKE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_username_for_revoke)],
        GET_USERNAME_FOR_GRANT_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_username_for_grant_admin)],
        GET_USERNAME_FOR_REVOKE_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_username_for_revoke_admin)],
        GET_USERNAME_FOR_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_username_for_info)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    persistent=True,
    name="admin_conversation_handler",
    per_message=False
)

def setup_bot(webhook_mode: bool = False) -> Application:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    :param webhook_mode: –ï—Å–ª–∏ True, –±–æ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏, 
                         –∏–Ω–∞—á–µ - –≤ —Ä–µ–∂–∏–º–µ polling.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PicklePersistence –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    persistence = PicklePersistence(filepath="bot_persistence")

    app_builder = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).persistence(persistence)

    # –í —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if webhook_mode:
        app_builder.updater(None)

    app = app_builder.build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help_ap", help_ap))
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    app.add_handler(conv_handler)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ /admin
    # app.add_handler(CommandHandler("grant_access", grant_access))
    # app.add_handler(CommandHandler("revoke_access", revoke_access))
    # app.add_handler(CommandHandler("grant_admin", grant_admin))
    # app.add_handler(CommandHandler("revoke_admin", revoke_admin))
    # app.add_handler(CommandHandler("user_info", user_info))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å (–¥–ª—è set_webhook)
    app.update_types = ['message', 'callback_query']

    return app


async def run_bot_polling():
    logger.info("Setting up and running bot polling...")
    try:
        application = setup_bot()
        # run_polling() - —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤.
        # –û–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
        application.run_polling()
    except ValueError as e:
        logger.error(e) # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        logger.critical(f"An unexpected error occurred in bot main function: {e}", exc_info=True)


if __name__ == "__main__":
    main()
